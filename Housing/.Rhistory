Owned =replace_na(Owned, 'All Others'))
# Define the center coordinates for Rexburg, Idaho
center_coords <- c(43.825645, -111.783782)  # Latitude and Longitude of Rexburg
# Create a Leaflet map centered around Rexburg
map <- leaflet() %>%
setView(lng = center_coords[2], lat = center_coords[1], zoom = 15) %>%
addProviderTiles("Esri.WorldTerrain")  # Use a simple terrain map as the base map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Owned,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = ~Apartment,  # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
# Add a legend for ownership
map <- map %>%
addLegend(
"bottomright",
colors = unique(data$Owned),  # Legend colors based on unique values in "Owned"
labels = unique(data$Owned),
title = "Ownership",
opacity = 1
)
# Add a
map
# Create a Leaflet map centered around Rexburg
map <- leaflet() %>%
setView(lng = center_coords[2], lat = center_coords[1], zoom = 15) %>%
addProviderTiles("OpenStreetMap.Mapnik")  # Use a simple terrain map as the base map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Owned,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = ~Apartment,  # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
# Add a legend for ownership
map <- map %>%
addLegend(
"bottomright",
colors = unique(data$Owned),  # Legend colors based on unique values in "Owned"
labels = unique(data$Owned),
title = "Ownership",
opacity = 1
)
# Add a
map
data$Owned
colors <- c("Redstone Residential" = "red", "South Fork Property Management" = "yellow",
'Connextion'='blue','BYUI'='lightblue','Triton Invesments'='green',
'Craigland Housing'='brown','All Others'='grey','Iceberg Housing'='black',
'Covey Regional'='purple','Best Nest Housing'='orange')
# Create a Leaflet map centered around Rexburg
map <- leaflet() %>%
setView(lng = center_coords[2], lat = center_coords[1], zoom = 15) %>%
addProviderTiles("OpenStreetMap.Mapnik")  # Use a simple terrain map as the base map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Owned %>% factor() %>% as.numeric() %>% {colors[.]},,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = ~Apartment,  # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
# Add a legend for ownership
map <- map %>%
addLegend(
"bottomright",
colors = unique(data$Owned),  # Legend colors based on unique values in "Owned"
labels = unique(data$Owned),
title = "Ownership",
opacity = 1
)
# Add a
map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Owned %>% factor() %>% as.numeric() %>% {colors[.]},  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = ~Apartment,  # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
map
?match
color_df <- data.frame(Key = names(colors), Color = unlist(colors))
# Sample data with columns: Latitude, Longitude, Apartment, Owned
data = read_xlsx('Rent.xlsx',sheet='Rent') %>%
mutate(asPercent = Capacity / sum(Capacity) * 100,
Owned = str_replace(Owned,'Self|Other','All Others'),
Key =replace_na(Owned, 'All Others'))
data$Key
# Merge the datasets
result <- merge(your_dataset, color_df, by = "Key", all.x = TRUE)
# Merge the datasets
result <- merge(data, color_df, by = "Key", all.x = TRUE)
data <- result
# Define the center coordinates for Rexburg, Idaho
center_coords <- c(43.825645, -111.783782)  # Latitude and Longitude of Rexburg
# Create a Leaflet map centered around Rexburg
map <- leaflet() %>%
setView(lng = center_coords[2], lat = center_coords[1], zoom = 15) %>%
addProviderTiles("OpenStreetMap.Mapnik")  # Use a simple terrain map as the base map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Owned %>% factor() %>% as.numeric() %>% {colors[.]},  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = ~Apartment,  # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
# Create a Leaflet map centered around Rexburg
map <- leaflet() %>%
setView(lng = center_coords[2], lat = center_coords[1], zoom = 15) %>%
addProviderTiles("OpenStreetMap.Mapnik")  # Use a simple terrain map as the base map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Color,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = ~Apartment,  # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
map
# Add a legend for ownership
map <- map %>%
addLegend(
"bottomright",
colors = unique(data$Owned),  # Legend colors based on unique values in "Owned"
labels = unique(data$Owned),
title = "Ownership",
opacity = 1
)
# Add a
map
# Add a legend for ownership
map <- map %>%
addLegend(
"bottomright",
colors = unique(data$Color),  # Legend colors based on unique values in "Owned"
labels = unique(data$Owned),
title = "Ownership",
opacity = 1
)
# Add a
map
# Add a legend for ownership
map <- map %>%
addLegend(
"bottomright",
colors = unique(data$Color),  # Legend colors based on unique values in "Owned"
labels = unique(data$Owned),
title = "Ownership",
opacity = .5
)
# Add a
map
unique(data$Color)
unique(data$Owned)
colors <- c("Redstone Residential" = "red", "South Fork Property Management" = "yellow",
'Connextion'='blue','BYUI'='lightblue','Triton Invesments'='green',
'Craigland Housing'='brown','All Others'='grey','Iceberg Housing'='black',
'Covey Regional'='purple','Best Nest Housing'='orange',
'Sweetwater Properties'='pink','Preferred Capital Management'='tan')
color_df <- data.frame(Key = names(colors), Color = unlist(colors))
# Sample data with columns: Latitude, Longitude, Apartment, Owned
data = read_xlsx('Rent.xlsx',sheet='Rent') %>%
mutate(asPercent = Capacity / sum(Capacity) * 100,
Owned = str_replace(Owned,'Self|Other','All Others'),
Key =replace_na(Owned, 'All Others'))
# Merge the datasets
result <- merge(data, color_df, by = "Key", all.x = TRUE)
data <- result
# Define the center coordinates for Rexburg, Idaho
center_coords <- c(43.825645, -111.783782)  # Latitude and Longitude of Rexburg
# Create a Leaflet map centered around Rexburg
map <- leaflet() %>%
setView(lng = center_coords[2], lat = center_coords[1], zoom = 15) %>%
addProviderTiles("OpenStreetMap.Mapnik")  # Use a simple terrain map as the base map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Color,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = ~Apartment,  # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
map
# Add a legend for ownership
map <- map %>%
addLegend(
"bottomright",
colors = unique(data$Color),  # Legend colors based on unique values in "Owned"
labels = unique(data$Owned),
title = "Ownership",
opacity = .5
)
# Add a
map
len(unique(data$Color))
length(unique(data$Color))
length(unique(data$Owned))
# Add a legend for ownership
map <- map %>%
addLegend(
"bottomright",
colors = unique(data$Color),  # Legend colors based on unique values in "Owned"
labels = unique(data$Key),
title = "Ownership",
opacity = .5
)
# Add a
map
# Add a legend for ownership
map <- map %>%
addLegend(
"bottomright",
colors = unique(data$Color),  # Legend colors based on unique values in "Owned"
labels = unique(data$Key),
title = "Ownership",
opacity = 1
)
# Add a
map
# Create a Leaflet map centered around Rexburg
map <- leaflet() %>%
setView(lng = center_coords[2], lat = center_coords[1], zoom = 15) %>%
addProviderTiles("OpenStreetMap.Mapnik")  # Use a simple terrain map as the base map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Color,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = ~Apartment,  # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
# Add a legend for ownership
map <- map %>%
addLegend(
"bottomright",
colors = unique(data$Color),  # Legend colors based on unique values in "Owned"
labels = unique(data$Key),
title = "Ownership",
opacity = 1
)
# Add a
map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Color,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = paste0(~Apartment,'\n', ~Key), # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Color,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = paste0(data$Apartment,'\n', data$Key), # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Color,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = paste0(data$Apartment,'\\n', data$Owned), # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Color,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = paste(data$Apartment,'\n', data$Key), # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Color,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = paste(data$Apartment,'\n\n', data$Key), # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
map
# Add circle markers for apartments
map <- map %>%
addCircleMarkers(
data = data,
radius = 8,
color = ~Color,  # Color the icons by the "Owned" column
stroke = FALSE,
fillOpacity = 0.8,
label = paste(data$Apartment,'--', data$Key), # Display "Apartment" column as a tooltip on mouseover
group = "Apartments"  # Group the markers
)
map
owners$
ggplot(owners,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935') +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='') +
geom_text(
label=owners$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)
ggplot(owners,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935') +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='') +
geom_text(
label=owners$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)
ggplot(owners,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935') +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='') +
geom_text(
label=owners$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T,size=2
)
install.packages("ggrepel")
library(ggrepel)
ggplot(owners,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935') +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='') +
geom_text_repel(
label=owners$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T,size=2
)
ggplot(filter(owners,count(Apartment)>2),aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935') +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Occupancy and Number of Complexes') +
geom_text_repel(
label=owners$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T,size=2
)
ggplot(filter(owners,count(`Count of Owned`)>2),aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935') +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Occupancy and Number of Complexes') +
geom_text_repel(
label=owners$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T,size=2
)
filter(owners,count(`Count of Owned`)>2)
count(`Count of Owned`)
ggplot(filter(owners,count(Count of Owned)>2),aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
ggplot(filter(owners,`Count of Owned`>2),aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935') +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Occupancy and Number of Complexes') +
geom_text_repel(
label=owners$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T,size=2
)
ggplot(scatter_own,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935') +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Occupancy and Number of Complexes') +
geom_text_repel(
label=scatter_own$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T,size=2
)
scatter_own = filter(owners,`Count of Owned`>2)
ggplot(scatter_own,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935') +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Occupancy and Number of Complexes') +
geom_text_repel(
label=scatter_own$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T,size=2
)
scatter_own = filter(owners,`Count of Owned`>3)
ggplot(scatter_own,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935') +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Occupancy and Number of Complexes') +
geom_text_repel(
label=scatter_own$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T,size=2
)
scatter_own = filter(owners,`Count of Owned`>2)
ggplot(scatter_own,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935') +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Occupancy and Number of Complexes') +
geom_text_repel(
label=scatter_own$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T,size=2
) #+
ggplot(scatter_own,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935',size=5) +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Number of Buildings & Beds') +
geom_text_repel(
label=scatter_own$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T,size=2
) #+
ggplot(scatter_own,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935',size=5) +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Number of Buildings & Beds') +
geom_text_repel(
label=scatter_own$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T,size=3
) #+
ggplot(scatter_own,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935',size=5) +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Number of Buildings & Beds') +
geom_text_repel(
label=scatter_own$`Row Labels`, size=3
) #+
ggplot(scatter_own,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935',size=5) +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Number of Buildings & Beds') +
geom_text_repel(
label=scatter_own$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,size=3
) #+
ggplot(scatter_own,aes(x=`Sum of Capacity`,y=`Count of Owned`)) +
geom_point(color='#A13935',size=5) +
theme_minimal() +
labs(x='Total Number of Beds',y='Total Number of Complexes',
title='Number of Buildings & Beds',
caption='Limited to Companies with 3+ Buildings') +
geom_text_repel(
label=scatter_own$`Row Labels`,
nudge_x = 0.25, nudge_y = 0.25,size=3
) #+
sqrt(owners$`Herfindahl-Hirschman Index`)
